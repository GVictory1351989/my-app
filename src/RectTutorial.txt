 React рдХрд╛ рдЙрджреНрджреЗрд╢реНрдп (Goal)
React рдХрд╛ рдореБрдЦреНрдп рдЙрджреНрджреЗрд╢реНрдп рд╣реИ: Web Page рдкрд░ HTML рдХреЛ Dynamic рд░реВрдк рд╕реЗ Render рдХрд░рдирд╛ред

ЁЯзй React рдХреИрд╕реЗ HTML Render рдХрд░рддрд╛ рд╣реИ?
React рджреЛ рдореБрдЦреНрдп рдЪреАрдЬрд╝реЛрдВ рдХрд╛ рдЙрдкрдпреЛрдЧ рдХрд░рддрд╛ рд╣реИ:
createRoot() Function
render() Method
ЁЯз▒ createRoot() рдХреНрдпрд╛ рдХрд░рддрд╛ рд╣реИ?
рдпрд╣ рдПрдХ HTML element рдХреЛ рд▓реЗрддрд╛ рд╣реИ (рдЬреИрд╕реЗ рдХрд┐ <div id="root">)
рдФрд░ React рдХреЛ рдмрддрд╛рддрд╛ рд╣реИ рдХрд┐ React Component рдХреЛ рдХрд╣рд╛рдБ рджрд┐рдЦрд╛рдирд╛ рд╣реИред
ЁЯОм render() рдХреНрдпрд╛ рдХрд░рддрд╛ рд╣реИ?
рдпрд╣ рдмрддрд╛рддрд╛ рд╣реИ рдХрд┐ рдХреМрди рд╕рд╛ React Component рджрд┐рдЦрд╛рдирд╛ рд╣реИред
ЁЯУБ React рдХрд╣рд╛рдБ Render рд╣реЛрддрд╛ рд╣реИ?
рдЖрдкрдХреЗ React рдкреНрд░реЛрдЬреЗрдХреНрдЯ рдореЗрдВ рдПрдХ public/index.html рдлрд╛рдЗрд▓ рд╣реЛрддреА рд╣реИред
рдЗрд╕ HTML рдлрд╛рдЗрд▓ рдореЗрдВ рдПрдХ рдЦрд╛рд▓реА <div id="root"></div> рд╣реЛрддрд╛ рд╣реИред
React рдЗрд╕реА рдореЗрдВ рдЕрдкрдирд╛ UI inject рдХрд░рддрд╛ рд╣реИред|

JSX рдХрд╛ рдкреВрд░рд╛ рдирд╛рдо
JSX рдХрд╛ рдорддрд▓рдм рд╣реИ: JavaScript XML
ЁЯз╛ JSX рдХреНрдпрд╛ рдХрд░рддрд╛ рд╣реИ?
JSX рд╣рдореЗрдВ React рдореЗрдВ HTML рд▓рд┐рдЦрдиреЗ рдХреА рд╕реБрд╡рд┐рдзрд╛ рджреЗрддрд╛ рд╣реИред
рдЗрд╕рд╕реЗ рд╣рдо JavaScript рдХреЛрдб рдХреЗ рдЕрдВрджрд░ HTML рдЬреИрд╕реЗ рджрд┐рдЦрдиреЗ рд╡рд╛рд▓реЗ code рд▓рд┐рдЦ рд╕рдХрддреЗ рд╣реИрдВред
JSX рдХреА рдорджрдж рд╕реЗ React рдХреЛрдб рд╕рд╛рдл-рд╕реБрдерд░рд╛ рдФрд░ рдкрдврд╝рдиреЗ рдореЗрдВ рдЖрд╕рд╛рди рдмрди рдЬрд╛рддрд╛ рд╣реИред
тЪЩя╕П JSX рдХреИрд╕реЗ рдХрд╛рдо рдХрд░рддрд╛ рд╣реИ?
рдмрд┐рдирд╛ JSX рдХреЗ рд╣рдореЗрдВ DOM рдореЗрдВ element рдбрд╛рд▓рдиреЗ рдХреЗ рд▓рд┐рдП createElement() рдФрд░ appendChild() рдЬреИрд╕реЗ methods рдХрд╛ use рдХрд░рдирд╛ рдкрдбрд╝рддрд╛ рд╣реИред
рд▓реЗрдХрд┐рди JSX рдХреЗ рд╕рд╛рде рд╣рдо рд╕реАрдзреЗ HTML-like syntax рд▓рд┐рдЦ рд╕рдХрддреЗ рд╣реИрдВ, рдЬреЛ React рдЕрдкрдиреЗ рдЖрдк React Elements рдореЗрдВ рдмрджрд▓ рджреЗрддрд╛ рд╣реИред

Components come in two types, Class components and Function components, in this tutorial we will concentrate on Function components.
A class component must include the extends React.Component statement. This statement creates an inheritance to React.Component, 
and gives your component access to React.Component's functions.
The component also requires a render() method, this method returns HTML.
class Car extends React.Component {
  render() {
    return <h2>Hi, I am a Car!</h2>;
  }
}
Function Component
Here is the same example as above, but created using a Function component instead.
A Function component also returns HTML, and behaves much the same way as a Class component,
 but Function components can be written using much less code, are easier to understand, and will be preferred in this tutorial.
 function Car() {
  return <h2>Hi, I am a Car!</h2>;
}

Rendering a Component
Now your React application has a component called Car, which returns an <h2> element.
To use this component in your application, use similar syntax as normal HTML: <Car />
const root = ReactDOM.createRoot(document.getElementById('root'));
root.render(<Car />);

Props
Components can be passed as props, which stands for properties.
Props are like function arguments, and you send them into the component as attributes.
You will learn more about props in the next chapter.
function Car(props) {
  return <h2>I am a {props.color} Car!</h2>;
}

const root = ReactDOM.createRoot(document.getElementById('root'));
root.render(<Car color="red"/>);
Components in Components
We can refer to components inside other components:
Example
Use the Car component inside the Garage component:
function Car() {
  return <h2>I am a Car!</h2>;
}
function Garage() {
  return (
    <>
      <h1>Who lives in my Garage?</h1>
      <Car />
    </>
  );
}
const root = ReactDOM.createRoot(document.getElementById('root'));
root.render(<Garage />);
Components in Files
React is all about re-using code, and it is recommended to split your components into separate files.
To do that, create a new file with a .js file extension and put the code inside it:
Note that the filename must start with an uppercase character.

Example
This is the new file, we named it "Car.js":

function Car() {
  return <h2>Hi, I am a Car!</h2>;
}

export default Car;

To be able to use the Car component, you have to import the file in your application.

Example
Now we import the "Car.js" file in the application, and we can use the Car component as if it was created here.

import React from 'react';
import ReactDOM from 'react-dom/client';
import Car from './Car.js';

const root = ReactDOM.createRoot(document.getElementById('root'));
root.render(<Car />);

 React Constructor тАУ Short Note (Hindi, Copy-Paste Friendly)

React рдореЗрдВ рдЬрдм рдХреЛрдИ Class Component рдмрдирддрд╛ рд╣реИ, рддреЛ рдЙрд╕рдХрд╛ constructor() method component рдХреЗ рдмрдирддреЗ рд╣реА рд╕рдмрд╕реЗ рдкрд╣рд▓реЗ рдЪрд▓рддрд╛ рд╣реИред

рдЗрд╕рдореЗрдВ рд╣рдо component рдХреА initial state рд╕реЗрдЯ рдХрд░рддреЗ рд╣реИрдВ рдФрд░ super() рдХреЙрд▓ рдХрд░рддреЗ рд╣реИрдВ рддрд╛рдХрд┐ parent class (React.Component) рдХреА properties рдХреЛ access рдХрд░ рд╕рдХреЗрдВред

Example:

javascript
рдХреЙрдкреА рдХрд░реЗрдВ
рдмрджрд▓реЗрдВ
class Car extends React.Component {
  constructor() {
    super();
    this.state = { color: "red" };
  }
  render() {
    return <h2>I am a {this.state.color} Car!</h2>;
  }
}
ЁЯФ╣ constructor() тЖТ component рдХреА рд╢реБрд░реБрдЖрдд рдореЗрдВ рдЪрд▓рддрд╛ рд╣реИ
ЁЯФ╣ this.state тЖТ component рдХрд╛ internal data
ЁЯФ╣ super() тЖТ parent class рдХреЛ initialize рдХрд░рддрд╛ рд╣реИ

React рдореЗрдВ props (properties) component рдХреЛ values рднреЗрдЬрдиреЗ рдХрд╛ рддрд░реАрдХрд╛ рд╣реИ, рдЬреЛ рдмрд┐рд▓реНрдХреБрд▓ function рдХреЗ arguments рдХреА рддрд░рд╣ рдХрд╛рдо рдХрд░рддреЗ рд╣реИрдВред 
рдЗрдиреНрд╣реЗрдВ component рдореЗрдВ HTML attributes рдХреА рддрд░рд╣ рдкрд╛рд╕ рдХрд┐рдпрд╛ рдЬрд╛рддрд╛ рд╣реИ, рдЬреИрд╕реЗ <Car color="red" />ред Props read-only рд╣реЛрддреЗ рд╣реИрдВ рдФрд░ component 
рдХреЗ рдЕрдВрджрд░ this.props.name рдХреА рддрд░рд╣ access рдХрд┐рдП рдЬрд╛рддреЗ рд╣реИрдВред рдЕрдЧрд░ рдЖрдк class component рдореЗрдВ constructor() рдпреВрдЬрд╝ рдХрд░ рд░рд╣реЗ рд╣реИрдВ, рддреЛ рдЙрд╕рдореЗрдВ props 
рдХреЛ parameter рдХреЗ рд░реВрдк рдореЗрдВ рдкрд╛рд╕ рдХрд░рдирд╛ рдФрд░ super(props) рдХреЙрд▓ рдХрд░рдирд╛ рдЬрд░реВрд░реА рд╣реЛрддрд╛ рд╣реИ рддрд╛рдХрд┐ parent class (React.Component) рдХреЛ props рдорд┐рд▓ рд╕рдХреЗрдВред
 Props рд╕реЗ components dynamic рдФрд░ reusable рдмрдирддреЗ рд╣реИрдВред
 
 <Car color="red" />
class Car extends React.Component {
  render() {
    return <h2>I am a {this.props.color} Car!</h2>;
  }
}

class Car extends React.Component {
  constructor(props) {
    super(props); // props React.Component рдХреЛ рднреЗрдЬреЗ рдЬрд╛рддреЗ рд╣реИрдВ
  }
  render() {
    return <h2>I am a {this.props.model}!</h2>;
  }
}

**ЁЯУМ Components in Components тАУ Short Note with Line-by-Line Example (Hindi, Copy-Paste Friendly)**

### тЬЕ **Note:**

React рдореЗрдВ рдЖрдк рдПрдХ component рдХреЗ рдЕрдВрджрд░ рджреВрд╕рд░рд╛ component **use** рдХрд░ рд╕рдХрддреЗ рд╣реИрдВред рдЗрд╕реЗ **component nesting** рдХрд╣рддреЗ рд╣реИрдВред рдЗрд╕рд╕реЗ UI рдХреЛ рдЫреЛрдЯреЗ-рдЫреЛрдЯреЗ рд╣рд┐рд╕реНрд╕реЛрдВ рдореЗрдВ рдмрд╛рдВрдЯрдХрд░ modular рдФрд░ reusable рдмрдирд╛рдпрд╛ рдЬрд╛ рд╕рдХрддрд╛ рд╣реИред Inner component рдХреЛ outer component рдХреЗ JSX рдореЗрдВ `<ComponentName />` рдХреЗ рд░реВрдк рдореЗрдВ call рдХрд┐рдпрд╛ рдЬрд╛рддрд╛ рд╣реИред

---

### тЬЕ **Example:**

```javascript
// ЁЯСЗ рдпрд╣ рдПрдХ рдЕрд▓рдЧ component рд╣реИ
class Car extends React.Component {
  render() {
    return <h2>I am a Car!</h2>; // рдпрд╣ output рджрд┐рдЦрд╛рдПрдЧрд╛
  }
}

// ЁЯСЗ рдпрд╣ рджреВрд╕рд░рд╛ component рд╣реИ рдЬреЛ рдКрдкрд░ рд╡рд╛рд▓реЗ рдХреЛ рдпреВрдЬрд╝ рдХрд░ рд░рд╣рд╛ рд╣реИ
class Garage extends React.Component {
  render() {
    return (
      <div>
        <h1>Who lives in my Garage?</h1> // Static heading
        <Car />  // ЁЯСИ рдпрд╣рд╛рдБ Car component рдХреЛ use рдХрд┐рдпрд╛ рдЧрдпрд╛ рд╣реИ (nested component)
      </div>
    );
  }
}

// ЁЯСЗ рдпрд╣рд╛рдВ рд╣рдо рд╕рд┐рд░реНрдл outer component Garage рдХреЛ render рдХрд░ рд░рд╣реЗ рд╣реИрдВ,
// рд▓реЗрдХрд┐рди рдЙрд╕рдХреЗ рдЕрдВрджрд░ Car component рдЕрдкрдиреЗ рдЖрдк include рд╣реЛ рдЬрд╛рддрд╛ рд╣реИ
const root = ReactDOM.createRoot(document.getElementById('root'));
root.render(<Garage />);
```
---

### ЁЯФБ **Line-by-Line Explanation:**

* `Car` рдПрдХ **child component** рд╣реИ рдЬреЛ рд╕рд┐рд░реНрдл `<h2>` return рдХрд░рддрд╛ рд╣реИред
* `Garage` рдПрдХ **parent component** рд╣реИ рдЬреЛ `<h1>` рдХреЗ рд╕рд╛рде `<Car />` рдХреЛ call рдХрд░рддрд╛ рд╣реИред
* `Garage` component рдХреЛ `render()` рдХрд░рдиреЗ рд╕реЗ рдЕрдВрджрд░ рдХрд╛ `Car` component рднреА render рд╣реЛ рдЬрд╛рддрд╛ рд╣реИред

ЁЯУМ **рдЗрд╕ рддрд░рд╣ рд╣рдо рдПрдХ component рдХреЗ рдЕрдВрджрд░ рджреВрд╕рд░рд╛ component рдбрд╛рд▓ рд╕рдХрддреЗ рд╣реИрдВ рдФрд░ UI рдХреЛ modular рдмрдирд╛ рд╕рдХрддреЗ рд╣реИрдВред**
**ЁЯУШ Components in Files тАУ рд╣рд┐рдВрджреА рдореЗрдВ рд╕рд╛рд░рд╛рдВрд╢ (Short & Clear Meaning)**

React рдореЗрдВ рдХреЛрдб рдХреЛ **reuse** рдХрд░рдирд╛ рдмрд╣реБрдд рдЬрд╝рд░реВрд░реА рд╣реЛрддрд╛ рд╣реИред рдЗрд╕рд▓рд┐рдП React рдореЗрдВ рд╣рд░ component рдХреЛ рдПрдХ **рдЕрд▓рдЧ file** рдореЗрдВ рд░рдЦрдирд╛ **рдЕрдЪреНрдЫрд╛ practice** рдорд╛рдирд╛ рдЬрд╛рддрд╛ рд╣реИред рдЗрд╕рд╕реЗ code **clean**, **modular** рдФрд░ **manageable** рдмрдирддрд╛ рд╣реИред

---

### ЁЯФ╣ рдХреИрд╕реЗ рдХрд░реЗрдВ?

* рд╣рд░ component рдХреЗ рд▓рд┐рдП рдПрдХ **рдирдИ `.js` рдлрд╛рдЗрд▓** рдмрдирд╛рдПрдВ (рдЬреИрд╕реЗ `Car.js`)
* рдЙрд╕ рдлрд╛рдЗрд▓ рдХреА рд╢реБрд░реБрдЖрдд рдореЗрдВ `React` рдХреЛ import рдХрд░реЗрдВ
* рдЕрдВрдд рдореЗрдВ рдЙрд╕ component рдХреЛ **`export default`** рдХрд░рдХреЗ рдмрд╛рд╣рд░ рднреЗрдЬреЗрдВ, рддрд╛рдХрд┐ рдЖрдк рдЙрд╕реЗ рджреВрд╕рд░реА рдлрд╛рдЗрд▓реЛрдВ рдореЗрдВ use рдХрд░ рд╕рдХреЗрдВред
---
### тЬЕ Example (`Car.js` рдлрд╛рдЗрд▓):
```javascript
import React from 'react';
function Car() {
  return <h2>I am a Car!</h2>;
}
export default Car;
рдЕрдм рдЖрдк рдЗрд╕ `Car` component рдХреЛ рдХрд┐рд╕реА рднреА рджреВрд╕рд░реА рдлрд╛рдЗрд▓ рдореЗрдВ import рдХрд░рдХреЗ use рдХрд░ рд╕рдХрддреЗ рд╣реИрдВ:
javascript
import Car from './Car';
ЁЯУМ **рд╕рд╛рд░рд╛рдВрд╢:** React рдореЗрдВ components рдХреЛ рдЕрд▓рдЧ-рдЕрд▓рдЧ `.js` рдлрд╛рдЗрд▓реЛрдВ рдореЗрдВ рд▓рд┐рдЦрдирд╛ code рдХреЛ reusable рдФрд░ organized рдмрдирд╛рддрд╛ рд╣реИред


**ЁЯУШ React Class Component State тАУ рд╣рд┐рдВрджреА рдореЗрдВ рд╕рд╛рд░рд╛рдВрд╢ (Short & Clear Meaning)**
React рдХреЗ **Class Components** рдореЗрдВ рдПрдХ **built-in `state` object** рд╣реЛрддрд╛ рд╣реИ, рдЬреЛ component рдХреА **internal values рдпрд╛ data** рдХреЛ рд╕реНрдЯреЛрд░ рдХрд░рдиреЗ рдХреЗ рд▓рд┐рдП use рд╣реЛрддрд╛ рд╣реИред
рдЖрдкрдиреЗ рдкрд╣рд▓реЗ рджреЗрдЦрд╛ рд╣реЛрдЧрд╛ рдХрд┐ рд╣рдордиреЗ `constructor()` рдореЗрдВ `this.state = {}` рд▓рд┐рдЦрд╛ рдерд╛ тАФ рдпрд╣реА component рдХреА **initial state** рд╕реЗрдЯ рдХрд░рдиреЗ рдХрд╛ рддрд░реАрдХрд╛ рд╣реИред
### ЁЯФ╣ `state` рдХреНрдпреЛрдВ рдЬрд╝рд░реВрд░реА рд╣реИ?
* `state` рдПрдХ рдРрд╕рд╛ object рд╣реИ рдЬрд┐рд╕рдореЗрдВ рд╡реЛ values рд╣реЛрддреА рд╣реИрдВ рдЬреЛ component рдХреЗ рдЕрдВрджрд░ рд╣реА use рд╣реЛрддреА рд╣реИрдВред
* рдЬрдм рдпреЗ `state` рдмрджрд▓рддреА рд╣реИ (update рд╣реЛрддреА рд╣реИ), рддреЛ React рдЕрдкрдиреЗ рдЖрдк рдЙрд╕ component рдХреЛ **re-render** рдХрд░ рджреЗрддрд╛ рд╣реИ, рдЬрд┐рд╕рд╕реЗ UI рдЕрдкрдбреЗрдЯ рд╣реЛ рдЬрд╛рддрд╛ рд╣реИред
### тЬЕ Example:
```javascript
class Car extends React.Component {
  constructor() {
    super();
    this.state = { brand: "Ford" }; // state defined
  }

  render() {
    return <h2>I drive a {this.state.brand}!</h2>; // state used
  }
}
ЁЯУМ **рд╕рд╛рд░рд╛рдВрд╢:**
`state` React class component рдХреА рдЕрдкрдиреА internal рдЬрд╛рдирдХрд╛рд░реА (рдЬреИрд╕реЗ brand, count рдЖрджрд┐) рдХреЛ рд░рдЦрддрд╛ рд╣реИред рдЬрдм `state` рдмрджрд▓рддреА рд╣реИ, component рдлрд┐рд░ рд╕реЗ render рд╣реЛрддрд╛ рд╣реИ рдФрд░ рдирдпрд╛ UI рджрд┐рдЦрд╛рддрд╛ рд╣реИред


рдпрд╣рд╛рдБ рдкрд░ **React Class Component State** рдФрд░ **Lifecycle Methods** рдХрд╛ рдПрдХ рд╕рдВрдХреНрд╖рд┐рдкреНрдд рдиреЛрдЯ рдФрд░ рдЙрджрд╛рд╣рд░рдг рдХреЗ рд╕рд╛рде рдкреВрд░рд╛ рд╕рд╛рд░рд╛рдВрд╢ рджрд┐рдпрд╛ рдЧрдпрд╛ рд╣реИ тАФ рд╣рд┐рдВрджреА рдореЗрдВ:

---

## ЁЯФ╣ React Class Component - State (рд╕реНрдерд┐рддрд┐)

* **state** рдПрдХ JavaScript object рд╣реИ рдЬреЛ component рдХреА current рд╕реНрдерд┐рддрд┐ (data) рдХреЛ рд╕реНрдЯреЛрд░ рдХрд░рддрд╛ рд╣реИред
* рдЬрдм рднреА state рдореЗрдВ рдмрджрд▓рд╛рд╡ рд╣реЛрддрд╛ рд╣реИ, component **re-render** рд╣реЛрддрд╛ рд╣реИред

### тЬЕ State Create рдХрд░рдирд╛

```js
class Car extends React.Component {
  constructor(props) {
    super(props);
    this.state = {
      brand: "Ford",
      model: "Mustang",
      color: "red",
      year: 1964
    };
  }
  render() {
    return <h1>My {this.state.brand}</h1>;
  }
}
```

### тЬЕ State Update рдХрд░рдирд╛ (setState)

```js
changeColor = () => {
  this.setState({color: "blue"});
}
```

---

## ЁЯФ╣ React Lifecycle Methods (рдЬреАрд╡рдирдЪрдХреНрд░ рд╡рд┐рдзрд┐рдпрд╛рдБ)

React components рддреАрди phases рд╕реЗ рдЧреБрдЬрд░рддреЗ рд╣реИрдВ:

1. **Mounting (рд╕реНрдерд╛рдкрдирд╛)**
2. **Updating (рдЕрдкрдбреЗрдЯрд┐рдВрдЧ)**
3. **Unmounting (рд╣рдЯрд╛рдирд╛)**

---

### ЁЯЯв 1. Mounting Phase

| Method                       | рдЙрдкрдпреЛрдЧ                              |
| ---------------------------- | ---------------------------------- |
| `constructor()`              | initial state рдФрд░ props рд╕реЗрдЯ рдХрд░рддрд╛ рд╣реИ |
| `getDerivedStateFromProps()` | props рд╕реЗ state derive рдХрд░рддрд╛ рд╣реИ      |
| `render()`                   | UI рд░реЗрдВрдбрд░ рдХрд░рддрд╛ рд╣реИ (рдЬрд╝рд░реВрд░реА method)   |
| `componentDidMount()`        | DOM рдореЗрдВ render рдХреЗ рдмрд╛рдж рдЪрд▓рддрд╛ рд╣реИ      |

#### ЁЯМЯ Example:

```js
class Header extends React.Component {
  constructor(props) {
    super(props);
    this.state = {favoritecolor: "red"};
  }
  componentDidMount() {
    setTimeout(() => {
      this.setState({favoritecolor: "yellow"});
    }, 1000);
  }
  render() {
    return <h1>Color: {this.state.favoritecolor}</h1>;
  }
}
```

---

### ЁЯЯа 2. Updating Phase

| Method                       | рдЙрдкрдпреЛрдЧ                                              |
| ---------------------------- | -------------------------------------------------- |
| `getDerivedStateFromProps()` | props рд╕реЗ рдирдП state derive рдХрд░рддрд╛ рд╣реИ                   |
| `shouldComponentUpdate()`    | rendering рд░реЛрдХрдиреЗ/рдЬрд╛рд░реА рд░рдЦрдиреЗ рдХрд╛ рдирд┐рд░реНрдгрдп рд▓реЗрддрд╛ рд╣реИ        |
| `render()`                   | re-render рдХрд░рддрд╛ рд╣реИ                                  |
| `getSnapshotBeforeUpdate()`  | update рд╕реЗ рдкрд╣рд▓реЗ previous props/state access рдХрд░рддрд╛ рд╣реИ |
| `componentDidUpdate()`       | update рдХреЗ рдмрд╛рдж рдЪрд▓рддрд╛ рд╣реИ                              |

#### ЁЯМЯ Example with getSnapshotBeforeUpdate:

```js
getSnapshotBeforeUpdate(prevProps, prevState) {
  document.getElementById("div1").innerHTML =
    "Previous color: " + prevState.favoritecolor;
}
componentDidUpdate() {
  document.getElementById("div2").innerHTML =
    "Updated color: " + this.state.favoritecolor;
}
```

---

### ЁЯФ┤ 3. Unmounting Phase

| Method                   | рдЙрдкрдпреЛрдЧ                               |
| ------------------------ | ----------------------------------- |
| `componentWillUnmount()` | Component рд╣рдЯрд╛рдП рдЬрд╛рдиреЗ рд╕реЗ рдкрд╣рд▓реЗ рдЪрд▓рддрд╛ рд╣реИ |

#### ЁЯМЯ Example:

```js
class Container extends React.Component {
  constructor(props) {
    super(props);
    this.state = {show: true};
  }
  delHeader = () => {
    this.setState({show: false});
  }
  render() {
    return (
      <div>
        {this.state.show && <Child />}
        <button onClick={this.delHeader}>Delete Header</button>
      </div>
    );
  }
}

class Child extends React.Component {
  componentWillUnmount() {
    alert("Header component рд╣рдЯрд╛рдпрд╛ рдЬрд╛ рд░рд╣рд╛ рд╣реИ");
  }
  render() {
    return <h1>Hello World!</h1>;
  }
}
```
### тЬЕ React Props тАУ Short Summary with Example (in Hindi + Code)

---

### ЁЯФ╣ Props рдХреНрдпрд╛ рд╣реИрдВ?

* Props = **Properties**
* рдпреЗ arguments рдХреА рддрд░рд╣ рд╣реЛрддреЗ рд╣реИрдВ, рдЬреЛ рдПрдХ component рдХреЛ рдмрд╛рд╣рд░ рд╕реЗ рднреЗрдЬреЗ рдЬрд╛рддреЗ рд╣реИрдВред
* Props рдХреЛ рд╣рдо HTML attributes рдХреА рддрд░рд╣ рднреЗрдЬрддреЗ рд╣реИрдВред
* Props **read-only** рд╣реЛрддреЗ рд╣реИрдВ (рдпрд╛рдирд┐ рдЗрдиреНрд╣реЗрдВ component рдХреЗ рдЕрдВрджрд░ change рдирд╣реАрдВ рдХрд░ рд╕рдХрддреЗ)ред

---

### ЁЯФ╣ Example 1 тАУ Simple String Prop

```jsx
function Car(props) {
  return <h2>I am a {props.brand}!</h2>;
}

function Garage() {
  return (
    <>
      <h1>Garage рдореЗрдВ рдХреМрди рд╣реИ?</h1>
      <Car brand="Ford" />
    </>
  );
}
```

---

### ЁЯФ╣ Example 2 тАУ Variable Prop

```jsx
function Garage() {
  const carName = "Honda";
  return <Car brand={carName} />;
}
```

---

### ЁЯФ╣ Example 3 тАУ Object Prop

```jsx
function Car(props) {
  return <h2>I am a {props.brand.model}!</h2>;
}

function Garage() {
  const carInfo = { name: "Ford", model: "Mustang" };
  return <Car brand={carInfo} />;
}
```

---

### ЁЯФТ Note:

> Props рдХреЛ **modify рдирд╣реАрдВ рдХрд┐рдпрд╛ рдЬрд╛ рд╕рдХрддрд╛**, рдпреЗ рдХреЗрд╡рд▓ read-only рд╣реЛрддреЗ рд╣реИрдВред

рдпрд╣рд╛рдБ React Events рдФрд░ Custom Events рдкрд░ рдЖрдзрд╛рд░рд┐рдд рд╕рдВрдХреНрд╖рд┐рдкреНрдд Hindi Notes рджрд┐рдП рдЬрд╛ рд░рд╣реЗ рд╣реИрдВ:

---

### ЁЯЯа **React Events (рдЗрд╡реЗрдВрдЯреНрд╕)**

#### тЬЕ React Events рдХреНрдпрд╛ рд╣реИрдВ?

React рдореЗрдВ HTML рдХреА рддрд░рд╣ user actions (рдЬреИрд╕реЗ click, change, mouseover) рдХреЛ handle рдХрд░рдиреЗ рдХреЗ рд▓рд┐рдП events рдХрд╛ рдЗрд╕реНрддреЗрдорд╛рд▓ рд╣реЛрддрд╛ рд╣реИред

#### тЬЕ Syntax:

* **CamelCase**: `onClick`, `onChange` (HTML рдореЗрдВ `onclick`, `onchange`)
* **JSX рдореЗрдВ Curly Braces**: `onClick={shoot}`

#### тЬЕ Example:

```jsx
function Football() {
  const shoot = () => {
    alert("Great Shot!");
  }

  return <button onClick={shoot}>Take the shot!</button>;
}
```

---

### ЁЯФ╡ **React Event рдореЗрдВ Argument рдкрд╛рд╕ рдХрд░рдирд╛**

```jsx
function Football() {
  const shoot = (message) => {
    alert(message);
  }

  return <button onClick={() => shoot("Goal!")}>Take the shot!</button>;
}
```

---

### ЁЯЯв **React Synthetic Event (рдЗрд╡реЗрдВрдЯ рдСрдмреНрдЬреЗрдХреНрдЯ)**

React рдореЗрдВ `event` рдПрдХ synthetic event рд╣реЛрддрд╛ рд╣реИ рдЬреЛ native DOM events рдкрд░ рдЖрдзрд╛рд░рд┐рдд рд╣реЛрддрд╛ рд╣реИред

```jsx
function Football() {
  const shoot = (msg, event) => {
    alert(event.type); // "click"
  }

  return <button onClick={(event) => shoot("Goal!", event)}>Take the shot!</button>;
}
```

---

### ЁЯФ┤ **Custom Events in React (рдХрд╕реНрдЯрдо рдЗрд╡реЗрдВрдЯ)**

React DOM рдореЗрдВ рд╕реАрдзреЗ рдХрд╕реНрдЯрдо рдЗрд╡реЗрдВрдЯ рдирд╣реАрдВ рд╣реЛрддреЗ рдЬреИрд╕реЗ native JS рдореЗрдВ рд╣реЛрддреЗ рд╣реИрдВред рд▓реЗрдХрд┐рди рдЖрдк component-to-component communication рдХреЗ рд▓рд┐рдП props рдФрд░ callbacks рдХрд╛ use рдХрд░рдХреЗ custom behavior рдмрдирд╛ рд╕рдХрддреЗ рд╣реИрдВред

#### тЬЕ Step by Step:

1. **Parent Component рд╕реЗ Callback рднреЗрдЬреЗрдВ**
2. **Child Component рдЙрд╕ callback рдХреЛ рдХреЙрд▓ рдХрд░реЗ**

#### ЁЯФ╖ Example:

```jsx
function Child(props) {
  return <button onClick={() => props.onKick("Ball kicked!")}>Kick</button>;
}

function Parent() {
  const handleKick = (msg) => {
    alert(msg);
  }

  return <Child onKick={handleKick} />;
}
---
### тЬи Summary:

| Point                  | Description                               |
| ---------------------- | ----------------------------------------- |
| `onClick={}`           | Event binding syntax                      |
| Synthetic Event        | React рдХрд╛ event object (`event.type` etc.) |
| Arrow Function         | Arguments рдкрд╛рд╕ рдХрд░рдиреЗ рдХреЗ рд▓рд┐рдП                 |
| Custom Event via Props | Parent рд╕реЗ callback рднреЗрдЬрдирд╛                  |

---

рдЕрдЧрд░ рдЖрдкрдХреЛ рдХрд┐рд╕реА specific custom event рдХреА рдЬрд░реВрд░рдд рд╣реЛ рдЬреИрд╕реЗ form validation рдпрд╛ notification trigger, 
рддреЛ context API рдпрд╛ third-party libraries (рдЬреИрд╕реЗ Redux, EventEmitter) рдХрд╛ рднреА рдЗрд╕реНрддреЗрдорд╛рд▓ рдХрд┐рдпрд╛ рдЬрд╛ рд╕рдХрддрд╛ рд╣реИред

рдмрд┐рд▓рдХреБрд▓ рд╕рд╣реА! React рдореЗрдВ рдЬрдм рднреА рдЖрдкрдХреЛ рдХрд┐рд╕реА **list of items** рдХреЛ UI рдореЗрдВ рджрд┐рдЦрд╛рдирд╛ рд╣реЛрддрд╛ рд╣реИ, рддреЛ рдЖрдк **JavaScript рдХреЗ `map()` method** рдХрд╛ рдЗрд╕реНрддреЗрдорд╛рд▓ рдХрд░рддреЗ рд╣реИрдВред

---

### ЁЯЯв **React рдореЗрдВ List Render рдХрд░рдирд╛**

React рдореЗрдВ list рдХреЛ render рдХрд░рдиреЗ рдХреЗ рд▓рд┐рдП рд╣рдо `map()` method рдХрд╛ рдЙрдкрдпреЛрдЧ рдХрд░рддреЗ рд╣реИрдВ рдХреНрдпреЛрдВрдХрд┐:

* рдпрд╣ рдПрдХ рдирдП array рдХреЛ return рдХрд░рддрд╛ рд╣реИред
* рдпрд╣ рд╣рд░ item рдХреЗ рд▓рд┐рдП JSX element generate рдХрд░рддрд╛ рд╣реИред

---

### тЬЕ Basic Example:

```jsx
function CarList() {
  const cars = ["Ford", "BMW", "Audi"];

  return (
    <ul>
      {cars.map((car, index) => (
        <li key={index}>{car}</li>
      ))}
    </ul>
  );
}
```

ЁЯУЭ **Explanation:**

* `cars.map(...)` тЖТ рдпрд╣ рд╣рд░ car рдХреЗ рд▓рд┐рдП `<li>` element рдмрдирд╛рдПрдЧрд╛ред
* `key={index}` тЖТ React рдХреЛ рд╣рд░ item рдХрд╛ unique рдкрд╣рдЪрд╛рди рджреЗрдиреЗ рдХреЗ рд▓рд┐рдПред

---

### ЁЯФ┤ Key Prop рдЬрд░реВрд░реА рдХреНрдпреЛрдВ рд╣реИ?

* **`key` prop** React рдХреЛ рдмрддрд╛рддрд╛ рд╣реИ рдХрд┐ рдХреМрди-рд╕рд╛ item рдмрджрд▓рд╛, рдЬреЛрдбрд╝рд╛ рдпрд╛ рд╣рдЯрд╛рдпрд╛ рдЧрдпрд╛ред
* рдмреЗрд╣рддрд░ performance рдФрд░ рдХрдо bugs рдХреЗ рд▓рд┐рдП `key` рд╣рдореЗрд╢рд╛ **unique рдФрд░ stable** рд╣реЛрдиреА рдЪрд╛рд╣рд┐рдПред (`id` prefer рдХрд┐рдпрд╛ рдЬрд╛рддрд╛ рд╣реИ)

---

### тЬЕ Object List рдХрд╛ Example:

```jsx
function CarList() {
  const cars = [
    { id: 1, brand: "Ford" },
    { id: 2, brand: "BMW" },
    { id: 3, brand: "Audi" },
  ];

  return (
    <ul>
      {cars.map((car) => (
        <li key={car.id}>{car.brand}</li>
      ))}
    </ul>
  );
}
```

---

### ЁЯЯг Short Summary (Hindi):

| Term             | Description                                 |
| ---------------- | ------------------------------------------- |
| `map()`          | Array рдХрд╛ loop рдЬреЛ JSX element return рдХрд░рддрд╛ рд╣реИ |
| `key`            | Unique рдкрд╣рдЪрд╛рди React рдХреЛ рджреЗрдиреЗ рдХреЗ рд▓рд┐рдП           |
| JSX inside `map` | List рдореЗрдВ рд╣рд░ element рдХреЛ render рдХрд░рдиреЗ рдХреЗ рд▓рд┐рдП   |

---
///
рдпрд╣рд╛рдБ рдкрд░ **React Forms** рдХрд╛ рдкреВрд░рд╛ рд╕рд╛рд░рд╛рдВрд╢ **рд╕рдВрдХреНрд╖рд┐рдкреНрдд рд░реВрдк рдореЗрдВ рд╣рд┐рдВрджреА рдореЗрдВ** рджрд┐рдпрд╛ рдЧрдпрд╛ рд╣реИ:

---

### тЬЕ **React рдореЗрдВ Forms рдХреНрдпрд╛ рд╣реИрдВ?**

React рдореЗрдВ рдлрд╝реЙрд░реНрдореНрд╕ HTML рдЬреИрд╕реЗ рд╣реА рд╣реЛрддреЗ рд╣реИрдВ рд▓реЗрдХрд┐рди рдЗрдирдХрд╛ рдбреЗрдЯрд╛ **component state** рдореЗрдВ store рд╣реЛрддрд╛ рд╣реИ рдФрд░ React рджреНрд╡рд╛рд░рд╛ control рдХрд┐рдпрд╛ рдЬрд╛рддрд╛ рд╣реИред

---

### 1я╕ПтГг **Basic Form Example (Without state)**

```jsx
function MyForm() {
  return (
    <form>
      <label>рдирд╛рдо рд▓рд┐рдЦрд┐рдП:
        <input type="text" />
      </label>
    </form>
  );
}
```

ЁЯФ┤ рдпрд╣ form submit рд╣реЛрдиреЗ рдкрд░ page рдХреЛ refresh рдХрд░ рджреЗрдЧрд╛ред
ЁЯСЙ рдЗрд╕рд▓рд┐рдП React рдореЗрдВ рд╣рдо рдЗрд╕реЗ control рдХрд░рддреЗ рд╣реИрдВред

---

### 2я╕ПтГг **Controlled Form (With state & onChange)**

```jsx
const [name, setName] = useState("");

<input
  type="text"
  value={name}
  onChange={(e) => setName(e.target.value)}
/>
```

ЁЯЯв рдпрд╣ input field рдЕрдм React state рд╕реЗ рдЬреБрдбрд╝рд╛ рд╣реИред рдЗрд╕реЗ **controlled component** рдХрд╣рддреЗ рд╣реИрдВред

---

### 3я╕ПтГг **Form Submission Control**

```jsx
<form onSubmit={handleSubmit}>
  ...
</form>

const handleSubmit = (event) => {
  event.preventDefault(); // page reload рд░реЛрдХреЗрдЧрд╛
  alert(`рдЖрдкрдХрд╛ рдирд╛рдо рд╣реИ: ${name}`);
}
```

---

### 4я╕ПтГг **Multiple Input Fields Example**

```jsx
const [inputs, setInputs] = useState({});

const handleChange = (e) => {
  const { name, value } = e.target;
  setInputs(values => ({ ...values, [name]: value }));
}
```

ЁЯЯб рд╕рднреА input fields рдПрдХ рд╣реА handler рд╕реЗ control рд╣реЛрддреЗ рд╣реИрдВред
ЁЯУМ рд╣рд░ input рдореЗрдВ `name` attribute рдЬрд╝рд░реВрд░реА рд╣реИред

---

### 5я╕ПтГг **Textarea in React**

```jsx
const [textarea, setTextarea] = useState("Initial text");

<textarea value={textarea} onChange={(e) => setTextarea(e.target.value)} />
```

ЁЯУМ HTML рдореЗрдВ content tag рдХреЗ рдмреАрдЪ рд╣реЛрддрд╛ рд╣реИ,
React рдореЗрдВ рдпрд╣ `value` рд╕реЗ controlled рд╣реЛрддрд╛ рд╣реИред

---

### 6я╕ПтГг **Select Box in React**

```jsx
const [myCar, setMyCar] = useState("Volvo");

<select value={myCar} onChange={(e) => setMyCar(e.target.value)}>
  <option value="Ford">Ford</option>
  <option value="Volvo">Volvo</option>
  <option value="Fiat">Fiat</option>
</select>
```

ЁЯЯг React рдореЗрдВ selected option `value` attribute рд╕реЗ manage рд╣реЛрддрд╛ рд╣реИ,
HTML рдореЗрдВ `selected` attribute рд╕реЗ рд╣реЛрддрд╛ рд╣реИред

---

### ЁЯФЪ **рдиреЛрдЯреНрд╕ рд╕рд╛рд░рд╛рдВрд╢**

| Input Type      | React рдореЗрдВ рдХреИрд╕реЗ Manage рд╣реЛрддрд╛ рд╣реИ           |
| --------------- | --------------------------------------- |
| Text Field      | `value` рдФрд░ `onChange` рд╕реЗ                |
| Textarea        | `value` рдФрд░ `onChange` рд╕реЗ                |
| Select Box      | `value` рдФрд░ `onChange` рд╕реЗ                |
| Form Submit     | `onSubmit` handler рд╕реЗ control рд╣реЛрддрд╛ рд╣реИ   |
| Multiple Fields | `name` рдФрд░ `useState({})` рд╕реЗ manage рдХрд░реЗрдВ |

---
### тЬЕ **React Router рдХреНрдпрд╛ рд╣реИ? (What is React Router in Hindi)**

**React Router** рдПрдХ **standard library** рд╣реИ рдЬреЛ React рдРрдк рдореЗрдВ **multiple pages** рдФрд░ **navigation (routing)** рдХреЛ handle рдХрд░рдиреЗ рдХреЗ рд▓рд┐рдП рдЗрд╕реНрддреЗрдорд╛рд▓ рдХреА рдЬрд╛рддреА рд╣реИред

---

## ЁЯУМ **React Router рдХреНрдпреЛрдВ рдЬрд╝рд░реВрд░реА рд╣реИ?**

React by default **Single Page Application (SPA)** рд╣реЛрддрд╛ рд╣реИ тАФ рдпрд╛рдиреА рдкреВрд░рд╛ рдРрдк рдПрдХ рд╣реА HTML page рдкрд░ рдЪрд▓рддрд╛ рд╣реИред

ЁЯФ╣ рдЕрдЧрд░ рдЖрдк "Home", "About", "Contact" рдЬреИрд╕реА рдЕрд▓рдЧ-рдЕрд▓рдЧ pages рдмрдирд╛рдирд╛ рдЪрд╛рд╣рддреЗ рд╣реИрдВ (рдЬреИрд╕реЗ рд╡реЗрдмрд╕рд╛рдЗрдЯ рдореЗрдВ рд╣реЛрддрд╛ рд╣реИ),
ЁЯФ╣ рдФрд░ рдмрд┐рдирд╛ рдкреЗрдЬ reload рдХрд┐рдП navigation рдХрд░рдирд╛ рдЪрд╛рд╣рддреЗ рд╣реИрдВ,
ЁЯФ╣ рддрдм рдЖрдкрдХреЛ **React Router** рдХреА рдЬрд╝рд░реВрд░рдд рд╣реЛрддреА рд╣реИред

---

## ЁЯз▒ React Router Setup

### ЁЯФ╣ Step 1: Installation

```bash
npm install react-router-dom
```

рдпрд╛ development dependency рдХреЗ рддреМрд░ рдкрд░:

```bash
npm i -D react-router-dom
```

---

### ЁЯФ╣ Step 2: Folder Structure (src/pages)

```
src/
тФЬтФАтФА pages/
тФВ   тФЬтФАтФА Layout.js
тФВ   тФЬтФАтФА Home.js
тФВ   тФЬтФАтФА Blogs.js
тФВ   тФЬтФАтФА Contact.js
тФВ   тФФтФАтФА NoPage.js
тФФтФАтФА index.js
```

---

### ЁЯФ╣ Step 3: Routing Setup (`index.js`)

```jsx
import ReactDOM from "react-dom/client";
import { BrowserRouter, Routes, Route } from "react-router-dom";
import Layout from "./pages/Layout";
import Home from "./pages/Home";
import Blogs from "./pages/Blogs";
import Contact from "./pages/Contact";
import NoPage from "./pages/NoPage";

function App() {
  return (
    <BrowserRouter>
      <Routes>
        <Route path="/" element={<Layout />}>
          <Route index element={<Home />} />
          <Route path="blogs" element={<Blogs />} />
          <Route path="contact" element={<Contact />} />
          <Route path="*" element={<NoPage />} />
        </Route>
      </Routes>
    </BrowserRouter>
  );
}

const root = ReactDOM.createRoot(document.getElementById('root'));
root.render(<App />);
```

---

## ЁЯФБ Page Components

### ЁЯФ╕ `Layout.js` (common nav + outlet)

```jsx
import { Outlet, Link } from "react-router-dom";

const Layout = () => {
  return (
    <>
      <nav>
        <ul>
          <li><Link to="/">Home</Link></li>
          <li><Link to="/blogs">Blogs</Link></li>
          <li><Link to="/contact">Contact</Link></li>
        </ul>
      </nav>
      <Outlet /> {/* рдпрд╣рд╛рдБ рдмрд╛рдХреА pages render рд╣реЛрдВрдЧреЗ */}
    </>
  );
};

export default Layout;
```

---

### ЁЯФ╕ `Home.js`

```jsx
const Home = () => {
  return <h1>Home</h1>;
};
export default Home;
```

---

### ЁЯФ╕ `Blogs.js`

```jsx
const Blogs = () => {
  return <h1>Blog Articles</h1>;
};
export default Blogs;
```

---

### ЁЯФ╕ `Contact.js`

```jsx
const Contact = () => {
  return <h1>Contact Me</h1>;
};
export default Contact;
```

---

### ЁЯФ╕ `NoPage.js` (404 Page)

```jsx
const NoPage = () => {
  return <h1>404 - Page Not Found</h1>;
};
export default NoPage;
```

---

## ЁЯФО Summary (рд╕рд╛рд░рд╛рдВрд╢)

| Feature         | Description (рд╡рд┐рд╡рд░рдг)                                |
| --------------- | -------------------------------------------------- |
| `BrowserRouter` | App рдХреЛ routing рдХреЗ рд▓рд┐рдП рддреИрдпрд╛рд░ рдХрд░рддрд╛ рд╣реИ                |
| `Routes`        | Multiple `<Route>` рдХреЛ wrap рдХрд░рддрд╛ рд╣реИ                 |
| `Route`         | URL path рдФрд░ Component рдХреЛ match рдХрд░рддрд╛ рд╣реИ             |
| `Layout`        | Common layout (рдЬреИрд╕реЗ navbar) рджреЗрддрд╛ рд╣реИ                |
| `Outlet`        | Child component рдХреЛ render рдХрд░рддрд╛ рд╣реИ                  |
| `Link`          | `a href` рдХрд╛ React version (рдмрд┐рдирд╛ reload navigation) |
| `path="*"`      | Fallback route (404 Page)                          |

---

### тЬЕ **React.memo рдХреНрдпрд╛ рд╣реИ? тАУ Short Hindi Notes**

#### ЁЯУМ **React.memo рдХрд╛ рдЙрдкрдпреЛрдЧ рдХреНрдпреЛрдВ рдХрд░рддреЗ рд╣реИрдВ?**

`React.memo` рдПрдХ **higher order component** рд╣реИ рдЬреЛ functional component рдХреЛ **unnecessary re-render** рд╣реЛрдиреЗ рд╕реЗ рдмрдЪрд╛рддрд╛ рд╣реИ **рдЕрдЧрд░ рдЙрд╕рдХреЗ props change рдирд╣реАрдВ рд╣реБрдП рд╣реЛрдВ**ред

---

### тЪая╕П Problem:

```jsx
<Todos todos={todos} />
```

рдЬрдм рдЖрдк `count` рдХреЛ update рдХрд░рддреЗ рд╣реИрдВ, рддрдм рднреА `Todos` рджреЛрдмрд╛рд░рд╛ render рд╣реЛ рдЬрд╛рддрд╛ рд╣реИ тАФ рдЬрдмрдХрд┐ `todos` рдХреА value change рдирд╣реАрдВ рд╣реБрдИред

тЮб рдЗрд╕рд╕реЗ **performance issue** рд╣реЛ рд╕рдХрддрд╛ рд╣реИ рдЬрдм component complex рд╣реЛред

---

### тЬЕ Solution: `React.memo`

```jsx
import { memo } from "react";

const Todos = ({ todos }) => {
  console.log("child render"); // Debug check
  return (
    <>
      <h2>My Todos</h2>
      {todos.map((todo, index) => (
        <p key={index}>{todo}</p>
      ))}
    </>
  );
};

export default memo(Todos); // ЁЯСИ Wrapped in memo
```

тЮб рдЕрдм `Todos` component **рд╕рд┐рд░реНрдл рддрдм re-render рд╣реЛрдЧрд╛ рдЬрдм todos props рдмрджрд▓реЗрдВрдЧреЗред**

---

### ЁЯОп Summary Table:

| Feature        | Description                                 |
| -------------- | ------------------------------------------- |
| `React.memo()` | Functional component рдХреЛ wrap рдХрд░рддрд╛ рд╣реИ        |
| Purpose        | Props рдирд╛ рдмрджрд▓реЗ рд╣реЛрдВ рддреЛ re-render рд░реЛрдХреЗ         |
| Benefit        | Performance optimization                    |
| Use-case       | Heavy рдпрд╛ рдмрд╛рд░-рдмрд╛рд░ render рд╣реЛрдиреЗ рд╡рд╛рд▓реЗ component |

---

рдпрд╣ рд░рд╣рд╛ рдПрдХ **Best Short Note** рдЬреЛ `useState` рдФрд░ `useEffect` рджреЛрдиреЛрдВ рдХреЛ рдПрдХ рд╕рд╛рде **рдЖрд╕рд╛рди рд╣рд┐рдВрджреА рдореЗрдВ** рд╕рдордЭрд╛рддрд╛ рд╣реИ тАФ рд╕рд╛рде рдореЗрдВ example рднреА рд╣реИЁЯСЗ

---

## тЬЕ **React Hooks тАУ useState рдФрд░ useEffect (Short Hindi Notes)**

### ЁЯФ╖ **1. useState рдХреНрдпрд╛ рд╣реИ?**

`useState()` рдПрдХ React Hook рд╣реИ рдЬреЛ component рдореЗрдВ **state** (рдорддрд▓рдм data) рдХреЛ handle рдХрд░рдиреЗ рдХреЗ рд▓рд┐рдП рдХрд╛рдо рдЖрддрд╛ рд╣реИред

ЁЯУж Syntax:

```js
const [value, setValue] = useState(initialValue);
```

---

### ЁЯФ╖ **2. useEffect рдХреНрдпрд╛ рд╣реИ?**

`useEffect()` рдПрдХ Hook рд╣реИ рдЬреЛ component рдХреЗ **render рд╣реЛрдиреЗ рдХреЗ рдмрд╛рдж** рдХреБрдЫ рдХрд╛рдо (рдЬреИрд╕реЗ API рдХреЙрд▓, console log, timer рд╡рдЧреИрд░рд╣) рдХрд░рдиреЗ рдХреЗ рд▓рд┐рдП рд╣реЛрддрд╛ рд╣реИред

ЁЯУж Syntax:

```js
useEffect(() => {
  // рдХрд╛рдо (side effect)
}, [dependency]);
```

---

### тЬЕ **Rules of Hooks:**

* рд╕рд┐рд░реНрдл React function components рдореЗрдВ рд╣реА рдЗрд╕реНрддреЗрдорд╛рд▓ рдХрд░реЗрдВред
* component рдХреЗ **top level рдкрд░ рд╣реА call рдХрд░реЗрдВ**, рдХрд┐рд╕реА condition рдпрд╛ loop рдХреЗ рдЕрдВрджрд░ рдирд╣реАрдВред
* рд╣рд░ рдмрд╛рд░ рдЬрдм dependency change рд╣реЛрддреА рд╣реИ, useEffect рдЪрд▓рддрд╛ рд╣реИред

---

### ЁЯФА **Example (useState + useEffect рд╕рд╛рде рдореЗрдВ):**

```jsx
import React, { useState, useEffect } from "react";

function App() {
  const [count, setCount] = useState(0);

  useEffect(() => {
    console.log(`рдЖрдкрдиреЗ ${count} рдмрд╛рд░ рдХреНрд▓рд┐рдХ рдХрд┐рдпрд╛`);
  }, [count]); // count рдмрджрд▓рдиреЗ рдкрд░ рдЪрд▓реЗрдЧрд╛

  return (
    <>
      <h1>Count: {count}</h1>
      <button onClick={() => setCount(count + 1)}>рдмрдврд╝рд╛рдУ</button>
    </>
  );
}

export default App;
```

---

### ЁЯФН **рдЗрд╕рдореЗрдВ рдХреНрдпрд╛ рд╣реЛ рд░рд╣рд╛ рд╣реИ:**

* `count` рдирд╛рдо рдХреА state рдмрдирд╛рдИ рдЧрдИред
* рд╣рд░ рдмрд╛рд░ рдЬрдм user рдмрдЯрди рдХреНрд▓рд┐рдХ рдХрд░рддрд╛ рд╣реИ тЖТ count рдмрдврд╝рддрд╛ рд╣реИред
* `useEffect()` рд╣рд░ рдмрд╛рд░ count рдХреЗ рдмрджрд▓рдиреЗ рдкрд░ console рдореЗрдВ message рджрд┐рдЦрд╛рддрд╛ рд╣реИред

---

### ЁЯУМ **useEffect рдХреЗ 3 Use Cases:**

| Syntax                            | рдХрдм рдЪрд▓реЗрдЧрд╛                      | рдХрд╛рдо                   |
| --------------------------------- | ----------------------------- | --------------------- |
| `useEffect(() => {...}, [])`      | рд╕рд┐рд░реНрдл рдПрдХ рдмрд╛рд░ (initial render) | рдЬреИрд╕реЗ: API рдХреЙрд▓         |
| `useEffect(() => {...})`          | рд╣рд░ render рдкрд░                  | рдЬреИрд╕реЗ: рдмрд┐рдирд╛ dependency |
| `useEffect(() => {...}, [count])` | рд╕рд┐рд░реНрдл рдЬрдм `count` рдмрджрд▓рддрд╛ рд╣реИ     | рдЬреИрд╕реЗ: counter log     |

---

рдпрд╣рд╛рдБ рдкрд░ React рдХреЗ рдХреБрдЫ Advanced Hooks рдХреЛ **Short, Easy aur Hindi рдореЗрдВ** рд╕рдордЭрд╛рдпрд╛ рдЧрдпрд╛ рд╣реИ тАФ рд╕рд╛рде рдореЗрдВ рдЖрд╕рд╛рди рдЙрджрд╛рд╣рд░рдг (examples) рднреА рджрд┐рдП рдЧрдП рд╣реИрдВред

---

## тЬЕ **1. `useContext` тАУ Global Data (Context API) рдХреЗ рд▓рд┐рдП**

### ЁЯФ╖ рдХреНрдпрд╛ рдХрд░рддрд╛ рд╣реИ?

Component tree рдореЗрдВ data рдХреЛ **props drilling рдХреЗ рдмрд┐рдирд╛** рдкрд╛рд╕ рдХрд░рдиреЗ рдХреЗ рд▓рд┐рдП use рд╣реЛрддрд╛ рд╣реИред

### ЁЯза рдЖрд╕рд╛рди рднрд╛рд╖рд╛:

Agar aapko ek data ko top-level рд╕реЗ deeply nested components рддрдХ рднреЗрдЬрдирд╛ рд╣реИ, рддреЛ `useContext` best рд╣реИред

### ЁЯУж Example:

```jsx
import React, { useContext, createContext } from 'react';

const MyContext = createContext();

function Child() {
  const value = useContext(MyContext);
  return <h1>Value: {value}</h1>;
}

function App() {
  return (
    <MyContext.Provider value="Namaste">
      <Child />
    </MyContext.Provider>
  );
}
```

---

## тЬЕ **2. `useRef` тАУ DOM access aur Non-re-render value**

### ЁЯФ╖ рдХреНрдпрд╛ рдХрд░рддрд╛ рд╣реИ?

* DOM рдХреЛ direct access рдХрд░рдиреЗ рдХреЗ рд▓рд┐рдП
* рдРрд╕реА value рд░рдЦрдиреЗ рдХреЗ рд▓рд┐рдП рдЬреЛ re-render рдкрд░ рдирд╣реАрдВ рдмрджрд▓реЗ

### ЁЯУж Example:

```jsx
import React, { useRef } from 'react';

function App() {
  const inputRef = useRef();

  const focusInput = () => {
    inputRef.current.focus();
  };

  return (
    <>
      <input ref={inputRef} type="text" />
      <button onClick={focusInput}>Focus</button>
    </>
  );
}
```

---

## тЬЕ **3. `useCallback` тАУ Function Memoization (рдмрдЪрд╛рд╡ re-creation рд╕реЗ)**

### ЁЯФ╖ рдХреНрдпрд╛ рдХрд░рддрд╛ рд╣реИ?

рд╣рд░ render рдкрд░ рдирдИ function рдмрдирд╛рдиреЗ рд╕реЗ рдмрдЪрд╛рддрд╛ рд╣реИред Performance optimization рдХреЗ рд▓рд┐рдПред

### ЁЯУж Example:

```jsx
import React, { useState, useCallback } from 'react';

function App() {
  const [count, setCount] = useState(0);

  const log = useCallback(() => {
    console.log("Clicked!");
  }, []);

  return (
    <>
      <button onClick={() => setCount(count + 1)}>+</button>
      <Child log={log} />
    </>
  );
}

function Child({ log }) {
  console.log("Child Render");
  return <button onClick={log}>Click me</button>;
}
```

---

## тЬЕ **4. `useMemo` тАУ Value Memoization (Slow calculation рдХреЛ рдмрдЪрд╛рдП)**

### ЁЯФ╖ рдХреНрдпрд╛ рдХрд░рддрд╛ рд╣реИ?

рдорд╣рдВрдЧреЗ calculation рдХреЛ рджреЛрдмрд╛рд░рд╛ рдирд╛ рдХрд░рдиреЗ рдХреЗ рд▓рд┐рдП memory рдореЗрдВ store рдХрд░рддрд╛ рд╣реИред

### ЁЯУж Example:

```jsx
import React, { useState, useMemo } from 'react';

function App() {
  const [count, setCount] = useState(0);

  const expensiveCalc = useMemo(() => {
    console.log("Calculating...");
    return count * 10;
  }, [count]);

  return (
    <>
      <h1>{expensiveCalc}</h1>
      <button onClick={() => setCount(count + 1)}>+</button>
    </>
  );
}
```

---

## тЬЕ **5. Custom Hooks тАУ рдЕрдкрдирд╛ Hook рдмрдирд╛рдПрдВ**

### ЁЯФ╖ рдХреНрдпрд╛ рдХрд░рддрд╛ рд╣реИ?

рдЕрдЧрд░ рдХреЛрдИ logic repeat рд╣реЛ рд░рд╣рд╛ рд╣реИ, рддреЛ рдЙрд╕реЗ рдПрдХ custom reusable hook рдореЗрдВ рдбрд╛рд▓ рд╕рдХрддреЗ рд╣реИрдВред

### ЁЯУж Example:

ЁЯФ╣ Custom Hook:

```jsx
import { useState, useEffect } from 'react';

function useWindowWidth() {
  const [width, setWidth] = useState(window.innerWidth);

  useEffect(() => {
    const handleResize = () => setWidth(window.innerWidth);
    window.addEventListener("resize", handleResize);

    return () => window.removeEventListener("resize", handleResize);
  }, []);

  return width;
}
```

ЁЯФ╣ рдЗрд╕реНрддреЗрдорд╛рд▓:

```jsx
function App() {
  const width = useWindowWidth();
  return <h1>Window width: {width}</h1>;
}
```

---

## ЁЯФЪ Final Summary Table:

| Hook          | Use / рдлрд╛рдпрджрд╛               | Example Use Case                |
| ------------- | ------------------------- | ------------------------------- |
| `useContext`  | Global data access        | Theme, Auth                     |
| `useRef`      | DOM access / no re-render | Input focus, Timer ID           |
| `useCallback` | Memoize function          | Avoid unnecessary child renders |
| `useMemo`     | Memoize calculation       | Expensive formula               |
| Custom Hook   | Reusable logic            | Window size, Form validation    |

---



